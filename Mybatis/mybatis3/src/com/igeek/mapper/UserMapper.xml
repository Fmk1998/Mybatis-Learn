<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql -->
<!-- 还有一个很重要的作用，使用动态代理开发DAO，1. namespace必须和Mapper接口类路径一致 -->
<mapper namespace="com.igeek.mapper.UserMapper">
	
	<!-- 使用包装类型查询用户 -->
	<select id="queryUserByQueryVo" parameterType="queryVo" resultType="user">
		SELECT * FROM `user` WHERE username LIKE '%${user.username}%'
	</select>
	
	<!-- 查询用户表数据条数 -->
	<select id="queryUserCount" resultType="int">
		SELECT count(*) FROM 
		  `user`
	</select>
	
	<!-- 查询所有的订单数据 -->
	<select id="queryUserAll" resultType="User">
		SELECT id, username,
		birthday, sex,
		address FROM `user`
	</select>
	
	<!-- 根据条件查询用户 -->
    <select id="queryUserByWhere" parameterType="user" resultType="user">
	    <!-- 使用include标签加载sql片段；refid是sql片段id -->
	SELECT <include refid="userFields" /> FROM `user`
	    <!-- where标签可以自动添加where，同时处理sql语句中第一个and关键字 -->
	<where>
		<if test="sex != null">
			AND sex = #{sex}
		</if>
		<if test="username != null and username != ''">
			AND username LIKE
			'%${username}%'
		</if>
	</where>
    </select>
    <!-- 声明sql片段 -->
    <sql id="userFields">
	    id, username, birthday, sex, address
    </sql>
    
    <!-- 根据ids查询用户 -->
<select id="queryUserByIds" parameterType="queryVo" resultType="user">
	SELECT * FROM `user`
	<where>
		<!-- foreach标签，进行遍历 -->
		<!-- collection：遍历的集合，这里是QueryVo的ids属性 -->
		<!-- item：遍历的项目，可以随便写，，但是和后面的#{}里面要一致 -->
		<!-- open：在前面添加的sql片段 -->
		<!-- close：在结尾处添加的sql片段 -->
		<!-- separator：指定遍历的元素之间使用的分隔符 -->
		<foreach collection="ids" item="item" open="id IN (" close=")"
			separator=",">
			#{item}
		</foreach>
	</where>
</select>

</mapper>